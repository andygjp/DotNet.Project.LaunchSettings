# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: windows-latest

variables:
  buildPlatform: Any CPU
  buildConfiguration: Release
  GitVersion.SemVer: ''

steps:
- task: UseDotNet@2
  displayName: Download old version of dotnet to satisfy gitversion requirements
  inputs:
    packageType: 'runtime'
    version: '2.1.30'

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: 'restore'
    projects: '$(Build.SourcesDirectory)'
    feedsToUse: 'select'

- task: PowerShell@2
  name: gitversionTool
  displayName: find path to gitversion tools
  inputs:
    targetType: 'inline'
    script: |
      "nuget package locations:"
      dotnet nuget locals all --list
      
      $packagesPath = dotnet nuget locals global-packages --list
      $gitversionPath = $packagesPath.Replace("global-packages: ", "") + "gitversion.commandline\5.2.0\"
      
      if ($null -ne $gitversionPath -and (Test-Path $gitversionPath)) {
        "path to tooling exists"
        Write-Host "##vso[task.setvariable variable=gitversionPath;isOutput=true]$gitversionPath"
      } else {
        "path '$gitversionPath' does not exist"
      }

- task: GitVersion@5
  displayName: Git version
  inputs:
    runtime: 'core'
    configFilePath: GitVersion.yml
    preferBundledVersion: false
    gitVersionPath: $(gitversionTool.gitversionPath)

- task: DotNetCoreCLI@2
  displayName: List DotNet SDKS
  inputs:
    command: custom
    custom: --list-sdks

- task: PowerShell@2
  displayName: Execute Build Script
  inputs:
    targetType: filePath
    filePath: .\build.ps1
    arguments: --configuration Release
    workingDirectory: $(Build.SourcesDirectory)
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion.SemVer'

- task: PublishTestResults@2
  displayName: Publish Test Results
  inputs:
    testRunner: xunit
    testResultsFiles: .\test_results\results.xml

- task: PublishPipelineArtifact@0
  displayName: Publish Output Artifact
  inputs:
    artifactName: output
    targetPath: .\output

- task: PublishPipelineArtifact@0
  displayName: Publish Test Result Artifact
  inputs:
    artifactName: test_results
    targetPath: .\test_results

- task: PublishPipelineArtifact@0
  displayName: Publish Package Artifact
  inputs:
    artifactName: package
    targetPath: .\package

- task: NuGetCommand@2
  displayName: Publish Package To NuGet
  continueOnError: true
  condition: and(succeeded(), eq(variables['UploadToNuget'], 'true'))
  inputs:
    command: push
    packagesToPush: .\package\*.nupkg
    nuGetFeedType: external
    publishFeedCredentials: nuget.org
    allowPackageConflicts: true
    versioningScheme: off
